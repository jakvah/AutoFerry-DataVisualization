[{"id":"f748cd58.ed149","type":"tab","label":"Map","disabled":false,"info":""},{"id":"f3301c37.8a248","type":"tab","label":"SendToClarify","disabled":false,"info":""},{"id":"116da051.3e3b7","type":"tab","label":"Portwind","disabled":false,"info":""},{"id":"54584d02.2939a4","type":"group","z":"f3301c37.8a248","name":"Send signals to Clarify","style":{"label":true},"nodes":["57c8c80b.c9a9b8","e1876d8.21bfa9","7f41844d.a2eb6c","31be4a82.9d4306","be9e19e1.054298","d1fc90bd.e70c3","1d96aee6.ca89c1","7b7b036e.a73afc","c6428d41.97e4b"],"x":94,"y":399,"w":1112,"h":222},{"id":"df40dd59.bd739","type":"group","z":"f3301c37.8a248","name":"Get data and prepare it for Clarify","style":{"label":true},"nodes":["c5854749.2cd0c8","601f3876.74d4d8","3247601c.6fb29","402ec3e5.663fec","ce0dd1cc.d842d","7966671f.153688","5b226cc.6327d94"],"x":174,"y":199,"w":1012,"h":142},{"id":"81177028.6eba9","type":"group","z":"116da051.3e3b7","name":"Send signals to Clarify","style":{"label":true},"nodes":["a0126cd5.80606","6e5b7fba.e82cd","b5d772f7.8635d","27ed65f9.9a1d4a","59acb797.d42658","ecb44125.fea4b","ea64a0bf.0db4d","354d2468.06402c","d33354be.ec3948"],"x":14,"y":239,"w":1112,"h":222},{"id":"35bd914c.5854ae","type":"group","z":"116da051.3e3b7","name":"Get data and prepare it for Clarify","style":{"label":true},"nodes":["52e2b0d3.4fbf8","f4de8078.283b1","ba9ecc39.8ac09","6e0b8241.29c68c","a362d8f0.4c96a8","d9e03e29.3823f","13620ed4.ae48b1","b50d95f5.941438"],"x":14,"y":79,"w":1112,"h":142},{"id":"50488f20.ddf07","type":"ui_group","name":"Map","tab":"c52998a3.a636f8","order":1,"disp":true,"width":"30","collapse":false},{"id":"c52998a3.a636f8","type":"ui_tab","name":"Home","icon":"dashboard","disabled":false,"hidden":false},{"id":"fa03e2bf.54a93","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":false},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#1bbfff","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false},"base-font":{"value":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"}},"angularTheme":{"primary":"indigo","accents":"blue","warn":"red","background":"grey"}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","lockMenu":"false","allowTempTheme":"true","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"cf748c36.ecf7d","type":"clarify-api","apiUrl":"https://clarify.clfy.io/api","integrationID":"__MISSING__","integrationName":"Portwind","organizationID":"__MISSING__","name":"Portwind @ dev"},{"id":"f6bbf6ab.79a838","type":"clarify-api","apiUrl":"https://clarify.searis.no/api","integrationID":"c18tgt8pv4i2ro3mtvlg","integrationName":"Gemini","organizationID":"bu43maqfji5kus8pj7kg","name":"Gemini"},{"id":"cb843f8f.11f4f","type":"tls-config","name":"","cert":"","key":"","ca":"","certname":"","keyname":"","caname":"","servername":"","verifyservercert":true},{"id":"f76ea5a0.f80dc8","type":"ui_worldmap","z":"f748cd58.ed149","group":"50488f20.ddf07","order":0,"width":"30","height":"18","name":"","lat":"63.446827","lon":"10.421906","zoom":"14","layer":"OSM grey","cluster":"","maxage":"","usermenu":"hide","layers":"hide","panit":"false","panlock":"false","zoomlock":"false","hiderightclick":"true","coords":"none","showgrid":"false","allowFileDrop":"false","path":"/worldmap","x":1220,"y":320,"wires":[]},{"id":"c5854749.2cd0c8","type":"debug","z":"f3301c37.8a248","g":"df40dd59.bd739","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1090,"y":300,"wires":[]},{"id":"601f3876.74d4d8","type":"function","z":"f3301c37.8a248","g":"df40dd59.bd739","name":"Prepare for Clarify","func":"\ntimestamp = msg.payload[1];\ndate = new Date(timestamp * 1e3).toISOString()\nid = \"velocity\"\ndata = [[date, msg.payload[0]]];\n\nswitch(id){\n    case \"velocity\":\n        msg.payload = {\n        'id': id,\n        'name':\"velocity\",\n        'dataType':\"numeric\",\n        'engUnit': \"kn\",\n        'data': data,\n        'labels':{'type': ['velocity']},\n        \"location\": [\n                    'Ravnkloa'\n                    ]\n        };\n}\n        \n\nreturn msg","outputs":1,"noerr":0,"initialize":"","finalize":"","x":890,"y":300,"wires":[["c5854749.2cd0c8","3247601c.6fb29"]]},{"id":"3247601c.6fb29","type":"link out","z":"f3301c37.8a248","g":"df40dd59.bd739","name":"Prepared for Clarify","links":["57c8c80b.c9a9b8"],"x":1055,"y":260,"wires":[]},{"id":"57c8c80b.c9a9b8","type":"link in","z":"f3301c37.8a248","g":"54584d02.2939a4","name":"To Clarify","links":["3247601c.6fb29"],"x":135,"y":440,"wires":[["e1876d8.21bfa9"]]},{"id":"e1876d8.21bfa9","type":"delay","z":"f3301c37.8a248","g":"54584d02.2939a4","name":"","pauseType":"rate","timeout":"2","timeoutUnits":"seconds","rate":"2","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":490,"y":440,"wires":[["c6428d41.97e4b"]]},{"id":"7f41844d.a2eb6c","type":"delay","z":"f3301c37.8a248","g":"54584d02.2939a4","name":"","pauseType":"rate","timeout":"2","timeoutUnits":"seconds","rate":"2","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":490,"y":540,"wires":[["7b7b036e.a73afc"]]},{"id":"31be4a82.9d4306","type":"debug","z":"f3301c37.8a248","g":"54584d02.2939a4","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1110,"y":540,"wires":[]},{"id":"be9e19e1.054298","type":"link out","z":"f3301c37.8a248","g":"54584d02.2939a4","name":"Data sent to Clarify","links":["309f05de.5ecf0a"],"x":1075,"y":580,"wires":[]},{"id":"d1fc90bd.e70c3","type":"switch","z":"f3301c37.8a248","g":"54584d02.2939a4","name":"","property":"created","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"true","repair":false,"outputs":2,"x":870,"y":440,"wires":[["1d96aee6.ca89c1"],["7f41844d.a2eb6c"]]},{"id":"1d96aee6.ca89c1","type":"delay","z":"f3301c37.8a248","g":"54584d02.2939a4","name":"","pauseType":"delay","timeout":"2","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1040,"y":440,"wires":[["7f41844d.a2eb6c"]]},{"id":"7b7b036e.a73afc","type":"add-data","z":"f3301c37.8a248","g":"54584d02.2939a4","name":"","data":"payload.data","dataType":"dataType","dataTypeType":"msg","signalID":"signalID","signalIDType":"msg","apiRef":"f6bbf6ab.79a838","x":680,"y":540,"wires":[["31be4a82.9d4306","be9e19e1.054298"]]},{"id":"c6428d41.97e4b","type":"ensure-multiple","z":"f3301c37.8a248","g":"54584d02.2939a4","name":"","apiRef":"f6bbf6ab.79a838","ID":"payload.id","signalName":"payload.name","x":700,"y":440,"wires":[["d1fc90bd.e70c3"]]},{"id":"60eaba82.a11094","type":"http request","z":"f748cd58.ed149","name":"Send request","method":"GET","ret":"obj","paytoqs":"ignore","url":"https://www.barentswatch.no/bwapi/v2/geodata/ais/openpositions?Xmin=10.336172332092610&Xmax=10.445618266968827&Ymin=63.3989&Ymax=63.467829056786954","tls":"","persist":false,"proxy":"","authType":"","x":650,"y":320,"wires":[["7b08e950.b28d18","4db6f772.c35258"]]},{"id":"be0affeb.8c3af","type":"cronplus","z":"f748cd58.ed149","name":"Run every minute","outputField":"payload","timeZone":"Europe/Oslo","persistDynamic":false,"commandResponseMsgOutput":"output1","outputs":1,"options":[{"name":"schedule1","topic":"schedule1","payloadType":"default","payload":"","expressionType":"cron","expression":"* * * * * ","location":"","offset":"0","solarType":"all","solarEvents":"sunrise,sunset"}],"x":130,"y":320,"wires":[["7f30f5e7.69cb4c"]]},{"id":"7b08e950.b28d18","type":"debug","z":"f748cd58.ed149","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":870,"y":260,"wires":[]},{"id":"750c6bf2.527664","type":"http request","z":"f748cd58.ed149","name":"","method":"POST","ret":"obj","paytoqs":"ignore","url":"https://id.barentswatch.no/connect/token","tls":"","persist":false,"proxy":"","authType":"","x":550,"y":180,"wires":[["79f6cb04.bb5f94"]]},{"id":"1a5f1fd5.22773","type":"change","z":"f748cd58.ed149","name":"","rules":[{"t":"set","p":"headers.Content-Type","pt":"msg","to":"application/x-www-form-urlencoded","tot":"str"},{"t":"set","p":"payload.grant_type","pt":"msg","to":"client_credentials","tot":"str"},{"t":"set","p":"payload.client_id","pt":"msg","to":"havard.hanssen94@gmail.com:Gemini","tot":"str"},{"t":"set","p":"payload.client_secret","pt":"msg","to":"autoferge123","tot":"str"},{"t":"set","p":"payload.scope","pt":"msg","to":"api","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":340,"y":180,"wires":[["750c6bf2.527664"]]},{"id":"79f6cb04.bb5f94","type":"change","z":"f748cd58.ed149","name":"","rules":[{"t":"set","p":"token","pt":"flow","to":"payload.access_token","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":780,"y":180,"wires":[[]]},{"id":"7f30f5e7.69cb4c","type":"function","z":"f748cd58.ed149","name":"Format request to Kystverket","func":"token = flow.get('token')\nvar msg1 = { headers:{Authorization:'Bearer '+token}};\nreturn msg1;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":400,"y":320,"wires":[["60eaba82.a11094"]]},{"id":"59ae6f1d.c7127","type":"debug","z":"f748cd58.ed149","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1230,"y":400,"wires":[]},{"id":"4db6f772.c35258","type":"function","z":"f748cd58.ed149","name":"Convert server response to map format","func":"boats = msg.payload;\n\nvar msg1 = {payload:[]};\n\nfor (i=0; i<boats.length;i++){\n    msg1.payload[i] = {'name':boats[i].name, \n                        'lat':boats[i].geometry.coordinates[1],\n                        'lon':boats[i].geometry.coordinates[0],\n                        'label':boats[i].callsign,\n                        'icon':'fa-dot-circle-o'\n}}\n//msg1.payload = msg1.payload[0];\nreturn msg1;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":960,"y":320,"wires":[["59ae6f1d.c7127","f76ea5a0.f80dc8"]]},{"id":"d0926146.8faef","type":"cronplus","z":"f748cd58.ed149","name":"Run every 59 minutes","outputField":"payload","timeZone":"Europe/Oslo","persistDynamic":false,"commandResponseMsgOutput":"output1","outputs":1,"options":[{"name":"schedule1","topic":"schedule1","payloadType":"default","payload":"","expressionType":"cron","expression":"*/59 * * * *","location":"","offset":"0","solarType":"all","solarEvents":"sunrise,sunset"}],"x":120,"y":180,"wires":[["1a5f1fd5.22773"]]},{"id":"227652d0.a59a4e","type":"inject","z":"f748cd58.ed149","name":"","props":[{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":"1","topic":"","payloadType":"str","x":90,"y":280,"wires":[["7f30f5e7.69cb4c"]]},{"id":"4646a834.9f6648","type":"inject","z":"f748cd58.ed149","name":"","props":[{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","payloadType":"str","x":90,"y":240,"wires":[["1a5f1fd5.22773"]]},{"id":"a181242a.b5bd08","type":"function","z":"116da051.3e3b7","name":"Config","func":"//const DateTime = global.get('luxon').DateTime;\n\nlet availableDatasets = {\n    'humidity': {\n        name: 'Average Humidity',\n        dataType: 'numeric',\n        engUnit: '%',\n    },\n    'pressure': {\n        name: 'Average Pressure',\n        dataType: 'numeric',\n        engUnit: 'bar',\n    },\n    'rain': {\n        name: 'Rain',\n        dataType: 'numeric',\n        engUnit: 'mm',\n    },\n    'temperature': {\n        name: 'Average Temperature',\n        dataType: 'numeric',\n        engUnit: '°C',\n    },\n    'wswd': {\n        name: 'Average Wind Speed',\n        dataType: 'numeric',\n        engUnit: 'm/s',\n    },\n};\n\n// desiredStations to be gathered.\nlet desiredStations = {\n    'vs1423': {\n        labels: {\n            city: ['Kristiansund'],\n            'data-source': ['Portwind'],\n            location: ['Kristiansund'],\n        },\n        startTime: \"2020-06-09T12:35:58.053Z\",\n        // Choose desired datasets from availableDatasets or all.\n        datasets: ['wswd'],\n    },\n};\n\nflow.set('config', {\n    api: {\n        host: 'www.portwind.no',\n        endpoint: 'api/dbdata.php',\n    },\n    availableDatasets: availableDatasets,\n    desiredStations: desiredStations,\n});\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":310,"y":40,"wires":[["9a32d81c.821bb8"]]},{"id":"9a32d81c.821bb8","type":"link out","z":"116da051.3e3b7","name":"Run cron job","links":["f4de8078.283b1"],"x":435,"y":40,"wires":[]},{"id":"52e2b0d3.4fbf8","type":"function","z":"116da051.3e3b7","g":"35bd914c.5854ae","name":"Handle get data","func":"const DateTime = global.get('luxon').DateTime;\nconst Duration = global.get('luxon').Duration;\n\ncfg = flow.get('config');\nif (cfg === undefined) {\n    throw 'config from flow context is empty';\n}\n\nfetchedState = flow.get('fetchedState');\nif (fetchedState === undefined) {\n    fetchedState = {};\n}\n\nmsg.url = 'https://' + cfg.api.host + '/' + cfg.api.endpoint;\n\n// Reset node status.\nnode.status({});\n\n// Node initiated from cron job.\nif (msg.payload.triggerTimestamp !== undefined) {\n    let lastRun = context.get('lastRun');\n    let diffNow = DateTime.fromISO(lastRun).diffNow().negate();\n    if (diffNow < Duration.fromISO('PT10S')) {\n        node.status({fill: 'yellow', shape: 'dot', text: 'Trigger ignore due to recent run.'});\n        return null;\n    }\n    \n    let stats = sendRequests(cfg, fetchedState);\n    if (stats.numSent === 0) {\n        node.status({fill: 'yellow', shape: 'dot', text: 'No requests sent.'});\n    } else {\n        var text = 'Sent ' + stats.numSent + '/' + stats.numProcessed + ' requests ';\n        node.status({fill: 'green', shape: 'dot', text: text});\n    }\n} else if (msg.statusCode !== undefined) {\n    fetchedState = updateFetchedState(fetchedState, msg);\n} else {\n    throw 'Unknown input msg: ' + JSON.stringify(msg);\n}\n\ncontext.set('lastRun', DateTime.utc());\nflow.set('fetchedState', fetchedState);\n\nreturn null;\n\n\n// sendRequests sends the one request per stationo, per measurement.\n// The desired time is determined in combination of startTime in config and\n// lastFetchedData in fetchedState.\nfunction sendRequests(cfg, fetchedState) {\n    var stats = {\n        numSent: 0,\n        numProcessed: 0,\n    };\n    \n    for (let [stationId, data] of Object.entries(cfg.desiredStations)) {\n        if (typeof data !== 'object' ) {\n            throw 'incorrect config data for ' + stationId + '. Data must be object.';\n        }\n        \n        var st = DateTime.fromISO(data.startTime);\n        if (st.minute > 0 || st.second > 0 || st.millisecond > 0) {\n            throw 'startTime must be whole hours.'\n        }\n        st = st.toUTC();\n        \n        let datasets = data.datasets;\n        if (datasets.length == 1 && datasets[0] == 'all') {\n            datasets = Object.keys(cfg.availableDatasets);\n        }\n\n        datasets.forEach(function(dataset, index) {\n            stats.numProcessed++;\n            \n            var time = st;\n            // Compare start time with lastFetchedTime\n            var t = getLastedFetchTime(fetchedState, stationId, dataset);\n            if (t >= time) {\n                time = t;\n            }\n            \n            r = new Request(stationId, dataset, time);\n            isSent = sendRequest(r);\n            if (isSent) {\n                stats.numSent++;\n            }\n        });\n    }\n    \n    return stats;\n}\n\n// Request is a object that contains request information used\n// by the function sendRequest.\nfunction Request(stationId, dataset, time) {\n    this.stationId = stationId;\n    this.dataset = dataset;\n    this.time = DateTime.fromISO(time);\n}\n\n// sendRequest sends one request via node.send for a specific Request.\n// Before sending does it check if given\n// time can yield results. If not, will it do nothing.\nfunction sendRequest(request) {\n    if (request === undefined) {\n        return false;\n    }\n    \n    // Check if we can expect data. The data is available every whole hour.\n    if (request.time >= DateTime.utc()) {\n        return false;\n    } else if (request.time.hour >= DateTime.utc().hour) {\n        return false;\n    }\n    \n    var hours = Math.ceil(request.time.diffNow().negate().as('hours'));\n    \n    // Minimum hour in the API is 3 hours.\n    if (hours < 3) {\n        hours = 3;\n    }\n\n    var requestData = {\n        stationid: request.stationId,\n        hours: hours,\n        dataset: request.dataset,\n    };\n    \n    msg.payload = requestData;\n    msg._requestedData = requestData;\n    node.send(msg);\n    \n    return true;\n}\n\n// getLastedFetchTime return last fetched time from the nested\n// data structure of fetchedState. Requires stationId (sid) and\n// dataset (d).\nfunction getLastedFetchTime(fetchedState, sid, d) {\n    if (!(sid in fetchedState)) {\n        return null;\n    }\n    \n    if (!(d in fetchedState[sid])) {\n        return null;\n    }\n    \n    var lastFetchedTime = fetchedState[sid][d].lastFetchedTime;\n    if (lastFetchedTime === undefined) {\n        return null;\n    }\n    \n    return DateTime.fromISO(lastFetchedTime);\n}\n\nfunction updateFetchedState(fetchedState, msg) {\n    if (msg._requestedData === undefined) {\n        throw 'Missing msg._requestedData in feedback loop';\n    }\n    if (typeof msg._requestedData !== 'object') {\n        throw 'msg._requestedData is not an object';\n    }\n    \n    if (msg._receivedPayload === undefined) {\n        throw 'Missing msg._receivedPayload in feedback loop';\n    }\n    if (typeof msg._receivedPayload !== 'object') {\n        throw 'msg._receivedPayload is not an object';\n    }\n    \n    var sid = msg._requestedData.stationid;\n    if (sid === '') {\n        throw 'msg._requestedData.stationid is empty';\n    }\n    \n    var d = msg._requestedData.dataset;\n    if (d === '') {\n        throw 'msg._requestedData.dataset is empty';\n    }\n    \n    var time = msg._receivedPayload.last_measurement;\n    if (time === undefined) {\n        throw 'msg._receivedPayload.last_measurement is empty';\n    }\n    time = DateTime.fromMillis(time);\n    \n    if (!(sid in fetchedState)) {\n        fetchedState[sid] = {};\n    }\n    \n    if (!(d in fetchedState[sid])) {\n        fetchedState[sid][d] = {};\n    }\n    \n    var request;\n    \n    var t = fetchedState[sid][d].lastFetchedTime;\n    if (t === undefined) {\n        fetchedState[sid][d].lastFetchedTime = time;\n    } else {\n        t = DateTime.fromISO(t);\n        if (time > t) {\n            fetchedState[sid][d].lastFetchedTime = time;\n        }\n    }\n    \n    return fetchedState;\n}","outputs":1,"noerr":0,"initialize":"","finalize":"","x":200,"y":180,"wires":[["a362d8f0.4c96a8"]]},{"id":"f4de8078.283b1","type":"link in","z":"116da051.3e3b7","g":"35bd914c.5854ae","name":"Request or rerequest data","links":["9a32d81c.821bb8","41bc7418.513f5c","59acb797.d42658"],"x":55,"y":180,"wires":[["52e2b0d3.4fbf8"]]},{"id":"ba9ecc39.8ac09","type":"debug","z":"116da051.3e3b7","g":"35bd914c.5854ae","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1030,"y":180,"wires":[]},{"id":"6e0b8241.29c68c","type":"http request","z":"116da051.3e3b7","g":"35bd914c.5854ae","name":"","method":"GET","ret":"obj","paytoqs":"query","url":"","tls":"","persist":false,"proxy":"","authType":"","x":610,"y":180,"wires":[["d9e03e29.3823f"]]},{"id":"a362d8f0.4c96a8","type":"delay","z":"116da051.3e3b7","g":"35bd914c.5854ae","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"2","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":420,"y":180,"wires":[["6e0b8241.29c68c"]]},{"id":"d9e03e29.3823f","type":"function","z":"116da051.3e3b7","g":"35bd914c.5854ae","name":"Prepare for Clarify","func":"if (msg.payload.error !== undefined) {\n    throw msg.payload.error;\n}\n\ncfg = flow.get('config');\nif (cfg === undefined) {\n    throw 'config from flow context is empty';\n}\n\nlet id = msg._requestedData.stationid;\nif (id === '') {\n    throw 'Requested stationid is empty';\n}\n\nif (!(id in cfg.desiredStations)) {\n    throw 'Could not find stationid in cfg.desiredStations: ' + id;\n}\nlet stationData = cfg.desiredStations[id];\n\nlet dataset = msg._requestedData.dataset;\nif (dataset === '') {\n    throw 'Requested dataset is empty';\n}\n\nif (!(dataset in cfg.availableDatasets)) {\n    throw 'Could not find dataset in cfg.availableDatasets: ' + dataset;\n}\nlet datasetData = cfg.availableDatasets[dataset];\n\n// TODO: Check statusCode == 200 and payload exists.\n\nlet data = [];\n\nswitch (dataset) {\n    case 'humidity':\n        data = msg.payload.data.map(d =>{\n            return [new Date(d[0]), d[1]]\n        });\n        break;\n    case 'pressure':\n        data = msg.payload.data.map(d =>{\n            return [new Date(d[0]), d[1]]\n        });\n        break;\n    case 'rain':\n        data = msg.payload.data.map(d =>{\n            return [new Date(d.uts), d.rain]\n        });\n        break;\n    case 'temperature':\n        data = msg.payload.data.map(d =>{\n            return [new Date(d[0]), d[1]]\n        });\n        break;\n    case 'wswd':\n        data = msg.payload.data.map(d =>{\n            return [new Date(d.uts), d.wind_speed]\n        });\n        break;\n    default:\n        throw 'Unknown requested dataset: ' + dataset;\n}\n\nmsg._receivedPayload = msg.payload;\nmsg.payload = {\n    id: (id + '-' + dataset).replace(/\\s/g, ''),\n    name: datasetData.name,\n    dataType: datasetData.dataType,\n    engUnit: datasetData.engUnit,\n    data: data,\n    labels: stationData.labels,\n    \n};\nnode.send(msg);\n\n\nreturn null;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":830,"y":180,"wires":[["ba9ecc39.8ac09","13620ed4.ae48b1"]]},{"id":"13620ed4.ae48b1","type":"link out","z":"116da051.3e3b7","g":"35bd914c.5854ae","name":"Prepared for Clarify","links":["a0126cd5.80606"],"x":995,"y":140,"wires":[]},{"id":"a0126cd5.80606","type":"link in","z":"116da051.3e3b7","g":"81177028.6eba9","name":"To Clarify","links":["13620ed4.ae48b1"],"x":55,"y":280,"wires":[[]]},{"id":"6e5b7fba.e82cd","type":"delay","z":"116da051.3e3b7","g":"81177028.6eba9","name":"","pauseType":"rate","timeout":"2","timeoutUnits":"seconds","rate":"2","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":410,"y":280,"wires":[["d33354be.ec3948"]]},{"id":"b5d772f7.8635d","type":"delay","z":"116da051.3e3b7","g":"81177028.6eba9","name":"","pauseType":"rate","timeout":"2","timeoutUnits":"seconds","rate":"2","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":410,"y":380,"wires":[["354d2468.06402c"]]},{"id":"27ed65f9.9a1d4a","type":"debug","z":"116da051.3e3b7","g":"81177028.6eba9","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1030,"y":380,"wires":[]},{"id":"59acb797.d42658","type":"link out","z":"116da051.3e3b7","g":"81177028.6eba9","name":"Data sent to Clarify","links":["f4de8078.283b1"],"x":995,"y":420,"wires":[]},{"id":"ecb44125.fea4b","type":"switch","z":"116da051.3e3b7","g":"81177028.6eba9","name":"","property":"created","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"true","repair":false,"outputs":2,"x":790,"y":280,"wires":[["ea64a0bf.0db4d"],["b5d772f7.8635d"]]},{"id":"ea64a0bf.0db4d","type":"delay","z":"116da051.3e3b7","g":"81177028.6eba9","name":"","pauseType":"delay","timeout":"2","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":960,"y":280,"wires":[["b5d772f7.8635d"]]},{"id":"354d2468.06402c","type":"add-data","z":"116da051.3e3b7","g":"81177028.6eba9","name":"","data":"payload.data","dataType":"dataType","dataTypeType":"msg","signalID":"signalID","signalIDType":"msg","apiRef":"f6bbf6ab.79a838","x":600,"y":380,"wires":[["27ed65f9.9a1d4a","59acb797.d42658"]]},{"id":"d33354be.ec3948","type":"ensure-multiple","z":"116da051.3e3b7","g":"81177028.6eba9","name":"","apiRef":"f6bbf6ab.79a838","ID":"payload.id","signalName":"payload.name","x":620,"y":280,"wires":[["ecb44125.fea4b"]]},{"id":"71db6d1c.237eb4","type":"cronplus","z":"116da051.3e3b7","name":"Run every hour","outputField":"payload","timeZone":"Europe/Oslo","persistDynamic":false,"commandResponseMsgOutput":"output1","outputs":1,"options":[{"name":"schedule1","topic":"schedule1","payloadType":"default","payload":"","expressionType":"cron","expression":"1 * * * *","location":"","offset":"0","solarType":"all","solarEvents":"sunrise,sunset"}],"x":120,"y":40,"wires":[["a181242a.b5bd08"]]},{"id":"402ec3e5.663fec","type":"inject","z":"f3301c37.8a248","g":"df40dd59.bd739","name":"","props":[{"p":"payload"},{"p":"id","v":"velocity","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"[20, 1617779549]","payloadType":"json","x":580,"y":240,"wires":[["601f3876.74d4d8"]]},{"id":"b50d95f5.941438","type":"inject","z":"116da051.3e3b7","g":"35bd914c.5854ae","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":590,"y":120,"wires":[["d9e03e29.3823f"]]},{"id":"9ac8fc22.8fb21","type":"mysql","z":"f748cd58.ed149","mydb":"","name":"Gemini DB","x":570,"y":420,"wires":[["c1575c44.a685e"]]},{"id":"a7deb895.23fa98","type":"cronplus","z":"f748cd58.ed149","name":"Run every second","outputField":"payload","timeZone":"Europe/Oslo","persistDynamic":false,"commandResponseMsgOutput":"output1","outputs":1,"options":[{"name":"schedule1","topic":"schedule1","payloadType":"default","payload":"","expressionType":"cron","expression":"* * * * * * ","location":"","offset":"0","solarType":"all","solarEvents":"sunrise,sunset"}],"x":130,"y":420,"wires":[["39b6ac77.2c4a94"]]},{"id":"39b6ac77.2c4a94","type":"change","z":"f748cd58.ed149","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"select * from ojb1","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":340,"y":420,"wires":[["9ac8fc22.8fb21"]]},{"id":"c1575c44.a685e","type":"function","z":"f748cd58.ed149","name":"Convert DB response to map format","func":"boats = msg.payload;\n\nvar msg2 = {payload:[]};\n\nmsg2[0] = {'name': 'Autoferry', 'lat': boats[0], 'lon':boats[0]};\n\nreturn msg2;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":950,"y":420,"wires":[["f76ea5a0.f80dc8"]]},{"id":"7966671f.153688","type":"mysql","z":"f3301c37.8a248","g":"df40dd59.bd739","mydb":"","name":"Database","x":520,"y":300,"wires":[["601f3876.74d4d8","5b226cc.6327d94"]]},{"id":"ce0dd1cc.d842d","type":"inject","z":"f3301c37.8a248","g":"df40dd59.bd739","name":"DB-Query","props":[{"p":"topic","vt":"str"},{"p":"id","v":"velocity","vt":"str"}],"repeat":"1","crontab":"","once":true,"onceDelay":"1","topic":"SELECT TOP 1 * FROM TABELLNAVN;","x":290,"y":300,"wires":[[]]},{"id":"5b226cc.6327d94","type":"debug","z":"f3301c37.8a248","g":"df40dd59.bd739","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":870,"y":240,"wires":[]}]